//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Color`.
    var color: RswiftResources.ColorResource { .init(name: "Color", path: [], bundle: bundle) }

    /// Color `TextColor`.
    var textColor: RswiftResources.ColorResource { .init(name: "TextColor", path: [], bundle: bundle) }

    /// Color `red`.
    var red: RswiftResources.ColorResource { .init(name: "red", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 31 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Icon.button.left.1`.
    var iconButtonLeft1: RswiftResources.ImageResource { .init(name: "Icon.button.left.1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon.button.left.2`.
    var iconButtonLeft2: RswiftResources.ImageResource { .init(name: "Icon.button.left.2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon.button.left.3`.
    var iconButtonLeft3: RswiftResources.ImageResource { .init(name: "Icon.button.left.3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon.button.left.4`.
    var iconButtonLeft4: RswiftResources.ImageResource { .init(name: "Icon.button.left.4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bannerimage.1`.
    var bannerimage1: RswiftResources.ImageResource { .init(name: "bannerimage.1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bannerimage.2`.
    var bannerimage2: RswiftResources.ImageResource { .init(name: "bannerimage.2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bannerimage.setting`.
    var bannerimageSetting: RswiftResources.ImageResource { .init(name: "bannerimage.setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iPhone 14 Pro 1`.
    var iPhone14Pro1: RswiftResources.ImageResource { .init(name: "iPhone 14 Pro 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iPhone 14 Pro 2`.
    var iPhone14Pro2: RswiftResources.ImageResource { .init(name: "iPhone 14 Pro 2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iPhone 14 Pro 3`.
    var iPhone14Pro3: RswiftResources.ImageResource { .init(name: "iPhone 14 Pro 3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iPhone 14 Pro 4`.
    var iPhone14Pro4: RswiftResources.ImageResource { .init(name: "iPhone 14 Pro 4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iPhone 14 Pro 5`.
    var iPhone14Pro5: RswiftResources.ImageResource { .init(name: "iPhone 14 Pro 5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.Indicator.1`.
    var iconIndicator1: RswiftResources.ImageResource { .init(name: "icon.Indicator.1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.Indicator.2`.
    var iconIndicator2: RswiftResources.ImageResource { .init(name: "icon.Indicator.2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.Indicator.3`.
    var iconIndicator3: RswiftResources.ImageResource { .init(name: "icon.Indicator.3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.Indicator.4`.
    var iconIndicator4: RswiftResources.ImageResource { .init(name: "icon.Indicator.4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.Indicator.5`.
    var iconIndicator5: RswiftResources.ImageResource { .init(name: "icon.Indicator.5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.airplay`.
    var iconAirplay: RswiftResources.ImageResource { .init(name: "icon.airplay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.back.blue.button`.
    var iconBackBlueButton: RswiftResources.ImageResource { .init(name: "icon.back.blue.button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.back.button`.
    var iconBackButton: RswiftResources.ImageResource { .init(name: "icon.back.button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.button.ariplay`.
    var iconButtonAriplay: RswiftResources.ImageResource { .init(name: "icon.button.ariplay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.button.home`.
    var iconButtonHome: RswiftResources.ImageResource { .init(name: "icon.button.home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.button.setting`.
    var iconButtonSetting: RswiftResources.ImageResource { .init(name: "icon.button.setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.button.tutorial`.
    var iconButtonTutorial: RswiftResources.ImageResource { .init(name: "icon.button.tutorial", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.check.button`.
    var iconCheckButton: RswiftResources.ImageResource { .init(name: "icon.check.button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.home.back.button`.
    var iconHomeBackButton: RswiftResources.ImageResource { .init(name: "icon.home.back.button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon.next.button`.
    var iconNextButton: RswiftResources.ImageResource { .init(name: "icon.next.button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image.botton.browser`.
    var imageBottonBrowser: RswiftResources.ImageResource { .init(name: "image.botton.browser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image.botton.video`.
    var imageBottonVideo: RswiftResources.ImageResource { .init(name: "image.botton.video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image.button.photos`.
    var imageButtonPhotos: RswiftResources.ImageResource { .init(name: "image.button.photos", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image.tvcap`.
    var imageTvcap: RswiftResources.ImageResource { .init(name: "image.tvcap", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Inter-Black`.
    var interBlack: RswiftResources.FontResource { .init(name: "Inter-Black", bundle: bundle, filename: "Inter-Black.ttf") }

    /// Font `Inter-Bold`.
    var interBold: RswiftResources.FontResource { .init(name: "Inter-Bold", bundle: bundle, filename: "Inter-Bold.ttf") }

    /// Font `Inter-ExtraBold`.
    var interExtraBold: RswiftResources.FontResource { .init(name: "Inter-ExtraBold", bundle: bundle, filename: "Inter-ExtraBold.ttf") }

    /// Font `Inter-ExtraLight`.
    var interExtraLight: RswiftResources.FontResource { .init(name: "Inter-ExtraLight", bundle: bundle, filename: "Inter-ExtraLight.ttf") }

    /// Font `Inter-Light`.
    var interLight: RswiftResources.FontResource { .init(name: "Inter-Light", bundle: bundle, filename: "Inter-Light.ttf") }

    /// Font `Inter-Medium`.
    var interMedium: RswiftResources.FontResource { .init(name: "Inter-Medium", bundle: bundle, filename: "Inter-Medium.ttf") }

    /// Font `Inter-Regular`.
    var interRegular: RswiftResources.FontResource { .init(name: "Inter-Regular", bundle: bundle, filename: "Inter-Regular.ttf") }

    /// Font `Inter-SemiBold`.
    var interSemiBold: RswiftResources.FontResource { .init(name: "Inter-SemiBold", bundle: bundle, filename: "Inter-SemiBold.ttf") }

    /// Font `Inter-Thin`.
    var interThin: RswiftResources.FontResource { .init(name: "Inter-Thin", bundle: bundle, filename: "Inter-Thin.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [interBlack, interBold, interExtraBold, interExtraLight, interLight, interMedium, interRegular, interSemiBold, interThin].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 9 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Inter-Black.ttf`.
    var interBlackTtf: RswiftResources.FileResource { .init(name: "Inter-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Bold.ttf`.
    var interBoldTtf: RswiftResources.FileResource { .init(name: "Inter-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-ExtraBold.ttf`.
    var interExtraBoldTtf: RswiftResources.FileResource { .init(name: "Inter-ExtraBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-ExtraLight.ttf`.
    var interExtraLightTtf: RswiftResources.FileResource { .init(name: "Inter-ExtraLight", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Light.ttf`.
    var interLightTtf: RswiftResources.FileResource { .init(name: "Inter-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Medium.ttf`.
    var interMediumTtf: RswiftResources.FileResource { .init(name: "Inter-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Regular.ttf`.
    var interRegularTtf: RswiftResources.FileResource { .init(name: "Inter-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-SemiBold.ttf`.
    var interSemiBoldTtf: RswiftResources.FileResource { .init(name: "Inter-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Thin.ttf`.
    var interThinTtf: RswiftResources.FileResource { .init(name: "Inter-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ConnectViewController`.
    var connectViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ConnectViewController", bundle: bundle) }

    /// Nib `ErrorMirroringViewController`.
    var errorMirroringViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ErrorMirroringViewController", bundle: bundle) }

    /// Nib `HomeViewController`.
    var homeViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeViewController", bundle: bundle) }

    /// Nib `MirroringStopViewController`.
    var mirroringStopViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MirroringStopViewController", bundle: bundle) }

    /// Nib `MirroringTutorialViewController`.
    var mirroringTutorialViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MirroringTutorialViewController", bundle: bundle) }

    /// Nib `SettingTableViewCell`.
    var settingTableViewCell: RswiftResources.NibReference<SettingTableViewCell> { .init(name: "SettingTableViewCell", bundle: bundle) }

    /// Nib `SettingViewController`.
    var settingViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SettingViewController", bundle: bundle) }

    /// Nib `TutorialView`.
    var tutorialView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TutorialView", bundle: bundle) }

    /// Nib `TutorialViewController`.
    var tutorialViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "TutorialViewController", bundle: bundle) }

    /// Nib `VideoLibraryCollectionViewCell`.
    var videoLibraryCollectionViewCell: RswiftResources.NibReference<VideoLibraryCollectionViewCell> { .init(name: "VideoLibraryCollectionViewCell", bundle: bundle) }

    /// Nib `VideoLibraryViewController`.
    var videoLibraryViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VideoLibraryViewController", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "icon.airplay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.airplay' is used in nib 'ConnectViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.airplay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.airplay' is used in nib 'ErrorMirroringViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.button.ariplay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.button.ariplay' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.button.home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.button.home' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.button.setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.button.setting' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.button.tutorial", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.button.tutorial' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.home.back.button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.home.back.button' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image.botton.browser", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image.botton.browser' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image.botton.video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image.botton.video' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image.button.photos", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image.button.photos' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image.tvcap", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image.tvcap' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'HomeViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bannerimage.2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bannerimage.2' is used in nib 'MirroringStopViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'MirroringStopViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bannerimage.1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bannerimage.1' is used in nib 'MirroringTutorialViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'MirroringTutorialViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bannerimage.setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bannerimage.setting' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.back.blue.button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.back.blue.button' is used in nib 'SettingViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'TutorialView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.back.button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.back.button' is used in nib 'TutorialViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.next.button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.next.button' is used in nib 'TutorialViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'TutorialViewController', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon.back.blue.button", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon.back.blue.button' is used in nib 'VideoLibraryViewController', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'VideoLibraryViewController', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}